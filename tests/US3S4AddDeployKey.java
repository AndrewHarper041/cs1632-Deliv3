//Test for US-3 Scenario-4
//Tests that user can add a deploy key to their repo

//Key used is a non used 'dummy' key generated by me 

import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;
import org.openqa.selenium.*;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.support.ui.Select;

public class US3S4AddDeployKey {
  private WebDriver driver;
  private String baseUrl;
  private boolean acceptNextAlert = true;
  private StringBuffer verificationErrors = new StringBuffer();

  @Before
  public void setUp() throws Exception {
    driver = new FirefoxDriver();
    baseUrl = "https://github.com/";
    driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
  }

  @Test
  public void testUS3S4AddDeployKey() throws Exception {
        driver.get(baseUrl + "/");
        driver.findElement(By.linkText("temprepo")).click();
        driver.findElement(By.xpath("(//a[contains(@href, '/cs1632user/temprepo/settings')])[2]")).click();
        driver.findElement(By.linkText("Deploy keys")).click();
        driver.findElement(By.linkText("Add deploy key")).click();
        assertTrue(isElementPresent(By.id("public_key_read_only")));
        driver.findElement(By.id("public_key_title")).clear();
        driver.findElement(By.id("public_key_title")).sendKeys("fake key");
        driver.findElement(By.id("public_key_key")).clear();
        driver.findElement(By.id("public_key_key")).sendKeys("ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAgEAvWeozCoQ3jFsiRKmcSvHa9C9HUxCT94r/kZIR3YLiz6QAoaWvZpkb1UZ+Al+1bAkObcNsTeuR+gm+HZQ2jvPHm0WYlt7VTwykWP7wt4faWitcvlEXsOxme7KpzGLf8P7LbE19vpixIBXxWBeURwQY74ufNrZ67tFOgvhEvmNRQx8hvz72GzwhF/OowGBHWhPWfNcsv8LPcYgXdbyb66STh+6Vd7tBuSwXfLXq3ifwgP2DfkDF+uu+nxfsmmfHNixj5KboHsCBrbBfMZCY9qjY1v07+dV3O8/8iDf65zmcSJVACLBrV82WqvRRvJoE7vZSk/mv5V8haF/YeWVSLDr1F/JYbqFrJM9RfUmQsk4wviYMF6US1edNybiKAxot1ASOfdPSy1JzrLHuhtl6+9OIIz5mkGkO9ox5Ei8GcJI8Ht8FFOoj31iqoOwsV3MJk/OPIapF7OFMHW0wa6VTS1eqHhyJtIAFZ/V5uYC7iKBJ6KYuSTbrtTnoMO0lHQ0vD+PtAqxRK7Y15TPb/pSz/VRKAXcpitqlVF0DHZaZazXLFZQ9Yp8/DNg/uskgQdEpTCKvrFi0gGkEbwxArESuq/FqsIEKbdnggDI2sWdoWku5lqHNggAqUwAl3NHo6NoIVMfjZvMm5QhqmVC7caUd2DJlZ0F7luaDnrlheVxPxYJ6gE= graphitezeppelin@gmail.com");
        driver.findElement(By.cssSelector("button.btn.btn-primary")).click();
        assertEquals("fake key", driver.findElement(By.cssSelector("strong.ssh-key-title")).getText());
        assertTrue(isElementPresent(By.cssSelector("span.mega-octicon.octicon-key")));
        driver.findElement(By.xpath("//button[@type='submit']")).click();
  }

  @After
  public void tearDown() throws Exception {
    driver.quit();
    String verificationErrorString = verificationErrors.toString();
    if (!"".equals(verificationErrorString)) {
      fail(verificationErrorString);
    }
  }

  private boolean isElementPresent(By by) {
    try {
      driver.findElement(by);
      return true;
    } catch (NoSuchElementException e) {
      return false;
    }
  }

  private boolean isAlertPresent() {
    try {
      driver.switchTo().alert();
      return true;
    } catch (NoAlertPresentException e) {
      return false;
    }
  }

  private String closeAlertAndGetItsText() {
    try {
      Alert alert = driver.switchTo().alert();
      String alertText = alert.getText();
      if (acceptNextAlert) {
        alert.accept();
      } else {
        alert.dismiss();
      }
      return alertText;
    } finally {
      acceptNextAlert = true;
    }
  }
}
